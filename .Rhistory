facet_grid(group~.)
n = 300
sample_size = 10000
dgf = 10
data = as.data.frame(
sapply(1:sample_size, function(x){rchisq(n, df=dgf)})
)
data[, 1:5]
hist(as.numeric(data[1,]))
avgs = colSums(data)/n
avgs[1:5]
mu = dgf
var = 2*dgf
ref = rnorm(sample_size, mean=mu, sd=sqrt(var/n))
df = data.frame(
value = c(avgs, ref),
group=rep(c("simu", "ref"), each=sample_size)
)
ggplot(data=df) +
geom_histogram(aes(x=value, fill=group), bins=30, alpha= 0.5) +
facet_grid(group~.)
n = 300
sample_size = 10000
dgf1=30; dgf2=20
data = as.data.frame(
sapply(1:sample_size, function(x){rf(n, dgf1, dgf2)})
)
data[, 1:5]
hist(as.numeric(data[1,]))
avgs = colSums(data)/n
mu = dgf2/(dgf2 - 2)
var = 2*dgf2^2*(dgf1+dgf2-2)/dgf1/(dgf2-2)^2/(dgf2-4)
ref = rnorm(sample_size, mean=mu, sd=sqrt(var/n))
df = data.frame(
value = c(avgs, ref),
group=rep(c("simu", "ref"), each=sample_size)
)
ggplot(data=df) +
geom_histogram(aes(x=value, fill=group), bins=100, alpha= 0.5) +
facet_grid(group~.)
n = 30
sample_size = 10000
data = as.data.frame(
sapply(1:sample_size, function(x){ rnorm(n)  })
)
data[, 1:5]
hist(as.numeric(data[1,]))
SqSum = colSums(data*data)
SqSum[1:4]
ref = rchisq(sample_size, df = n)
df = data.frame(
value = c(SqSum, ref),
group=rep(c("simu", "ref"), each=sample_size)
)
ggplot(data=df) +
geom_histogram(aes(x=value, fill=group), bins=30, alpha= 0.5) +
facet_grid(group~.)
n1=20; n2=30
sample_size = 20000
X1 = sapply(1:sample_size, function(x){ rchisq(1, n1)  })
X2 = sapply(1:sample_size, function(x){ rchisq(1, n2)  })
X1[1:5]
X2[1:5]
hist(X1)
ratio = (X1/n1) / (X2/n2)
ref = rf(sample_size, n1, n2)
df = data.frame(
value = c(ratio, ref),
group=rep(c("simu", "ref"), each=sample_size)
)
ggplot(data=df) +
geom_histogram(aes(x=value, fill=group), bins=30, alpha= 0.5) +
facet_grid(group~.)
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
rm(list=ls())
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(chisq.test(x=p,df =n)),col='red')
lines(density(chisq(x = p,df = n)),col='red')
lines(density(rchisq(x = p,df = n)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(x = p,df = n)),col='red')
plot(density(sim))
lines(density(rchiSq(x = p,df = n)),col='red')
lines(density(rchisq(x = p,df = n)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(x = p,df = n)),col='red')
lines(density(rchisq(f = n)),col='red')
lines(density(rchisq()),col='red')
lines(density(rchisq(x = p, n = n)),col='red')
?rchisq
lines(density(rchisq(p, n)),col='red')
lines(density(rchisq(n, p)),col='red')
plot(density(sim))
lines(density(rchisq(n, p)),col='red')
?rchisq
plot(density(sim))
lines(density(rchisq(n, p),col='red')
lines(density(rchisq(n, p),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p),col='red')
;
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
hist(sim)
mat = matrix(x = U, nrows =n, ncols = p)
mat = matrix(x = U, n, p)
U = runit(n*p)
U = runif(n*p)
mat = matrix(x = U, n, p)
mat = matrix(U, n, p)
hist(sim)
U = runif(n*p)
mat = matrix(U, n, p)
hist(sim)
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col='red')
lines(density(rchisq(n=n, df=p)),colors='red')
lines(density(rchisq(n=n, df=p)),col='red')
lines(density(rchisq(n=n, df=p)),col='red')
lines(density(rchisq(n=n, df=p)),colours = 'red')
lines(density(rchisq(n=n, df=p)),col = 'Red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col = 'Red')
hist((sim-n/2)/sqrt(n/12))
lines(density(rchisq(n=n, df=p)),col = 'Red')
n = 20
p = 1000
x = rnorm(n*p)
mat = matrix(x,n,p)
sim = colSums(mat*2)
plot(density(sim))
lines(density(rchisq(n=n, df=p)),col = 'Red')
plot(density(rf(n=10000,df1 = 20, df2 = 10)))
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='andrewshiny',
token='E1FF5D595725822551994648A4CF5BB4',
secret='ekplG1mjZToU4rQAsVq9cC417lMCX9+DDz8VzxCo')
shiny::runApp('~/NYCDSA/R/Intro_to_Shiny/flights/flights_final')
runApp('~/NYCDSA/R/Intro_to_Shiny/flights1')
#-----------------3--------------------------------
#1
datasets::HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
library(dplyr)
#2
HairEyeColor1 =
as.data.frame(HairEyeColor) %>%
filter(Eye == 'Brown'| Eye == 'Brown')
as.table(HairEyeColor1)
mosaicplot(as.table(HairEyeColor1), shade = TRUE)
#2
HairEyeColor1 =
as.data.frame(HairEyeColor) %>%
filter(Eye == 'Brown'| Eye == 'Brown')
mosaicplot(as.table(HairEyeColor1), shade = TRUE)
HairEyeColor[[1:3]]
mosaicplot(HairEyeColor1, shade = TRUE)
HairEyeColor[[1:3]]
class(HairEyeColor)
class(HairEyeColor1)
class(HairEyeColor)
head(HairEyeColor)
HairEyeColor
#2
HairEyeColor1 =
HairEyeColor %>%
filter(Eye == 'Brown'| Eye == 'Brown')
str(HairEyeColor)
HairEyeColor[,1:3,]
HairEyeColor[,1:2,2]
mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
q3.2 = HairEyeColor[,1:2,2]
bartlett.test(Hair ~ Eye, q3.2)
str(q3.2)
q3.2
q3.2$Eye
q3.2[,1]
q3.2[,2]
q3.2[1,]
q3.2[1:5,]
q3.2[1:2,]
q3.2[1:3,]
q3.2[1:4,]
q3.2[1:5,]
q3.2[1:4,]
q3.2[,1:4]
q3.2[,1:3]
q3.2[,1:2]
bartlett.test(q3.2[,1:2],q3.2[1:4,])
datasets::PlantGrowth
PlantGrowth %>% ggplot(., aes(x = group, y = weight)) +
geom_boxplot()
PlantGrowth %>% group_by(., group) %>%
summarise(Mean = mean(weight), SD = sd(weight), Max = max(weight), Min = min(weight))
#2
ctrl = PlantGrowth %>% filter(., group == 'ctrl')
trt1 = PlantGrowth %>% filter(., group == 'trt1')
trt2 = PlantGrowth %>% filter(., group == 'trt2')
var.test(trt1$weight,ctrl$weight)
# p value is 0.3719
var.test(trt2$weight,ctrl$weight)
#3
bartlett.test(weight~group, PlantGrowth)
datasets::PlantGrowth
x <- apply(HairEyeColor, c(1, 2), sum)
x
HairEyeColor[,1:2,2]
bartlett.test(q3.2)
q3.2[1]
data = read.csv('review_data.csv')
setwd("C:/Users/andre/Desktop/git_projects/Shiny_Project")
('review_data.csv')
data = read.csv('review_data.csv')
View(data)
#remove numbers
corpus_google_summary =
tm_map(corpus_google_summary, removeNumbers)
library(tm)
library(wordcloud)
library(dplyr)
data = read.csv("review_data.csv", header = TRUE)
google_summary =
data %>%
select(company,summary) %>%
filter(company == "google")
corpus_google_summary =
Corpus(VectorSource(google_summary$summary))
corpus_google_summary[[1]][1]
#convert the text to lower case
corpus_google_summary =
tm_map(corpus_google_summary, content_transformer(tolower))
#remove numbers
corpus_google_summary =
tm_map(corpus_google_summary, removeNumbers)
#remove english commom stopwords
corpus_google_summary =
tm_map(corpus_google_summary, removeWords,stopwords("english"))
# remove punctuations
corpus_google_summary =
tm_map(corpus_google_summary, removePunctuation)
# eliminate extra white spaces
corpus_google_summary =
tm_map(corpus_google_summary, stripWhitespace)
#remove additional stopwords
corpus_google_summary = tm_map(corpus_google_summary,
removeWords,
c("get","told","gave","took","can", "could"))
corpus_google_summary[[1]][1]
#Create TDM
tdm_google_summary = TermDocumentMatrix(corpus_google_summary)
m_google_summary = as.matrix(tdm_google_summary)
v_google_summary = sort(rowSums(m_google_summary), decreasing = TRUE)
d_google_summary = data.frame(word = names(v_google_summary), freq=v_google_summary)
#wordcloud
wordcloud(d_google_summary$word, d_google_summary$freq, random.order = FALSE, rot.per = 0.3, scale = c(4,0.5), max.words = Inf, colors = brewer.pal(8,"Dark2"))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(memoise)
?memoise
unique(data.company)
unique(data$company)
runApp()
runApp()
runApp()
runApp()
runApp()
choice = c('overall.ratings',
'work.balance.stars',
'culture.values.stars',
'carrer.opportunities.stars',
'comp.benefit.stars',
'senior.mangemnet.stars')
runApp()
runApp()
runApp()
library(shinydashboard)
library(shinythemes)
library(ggplot2)
library(dplyr)
library(tm)
library(wordcloud)
library(memoise)
choice = c('overall.ratings',
'work.balance.stars',
'culture.values.stars',
'carrer.opportunities.stars',
'comp.benefit.stars',
'senior.mangemnet.stars')
data = read.csv('review_data.csv')
#----word cloud-----
#data filter
companies = list('google','amazon','facebook','netflix','apple','microsoft')
getTermMatrix = memoise(function(company){
if (!(companyname %in% companies))
stop("Unknown company")
summary = data %>% select(company,summary) %>% filter(company == companyname)
corpus_sum = Corpus(VectorSource(summary$summary))
corpus_sum = tm_map(corpus_sum, content_transformer(tolower))
corpus_sum = tm_map(corpus_sum, removeNumbers)
corpus_sum = tm_map(corpus_sum, removeWords ,stopwords('english'))
corpus_sum = tm_map(corpus_sum, removePunctuation)
corpus_sum = tm_map(corpus_sum, stripWhitespace)
corpus_sum = tm_map(corpus_sum, removeWords,c("get","told","gave","took","can", "could"))
tdm_sum= TermDocumentMatrix(corpus_sum,control = list(minWordLength = 1))
m_sum= as.matrix(tdm_sum)
v_sum = sort(rowSums(m_sum), decreasing = TRUE)
d_sum = data.frame(word = names(v_sum), freq=v_sum)
# pro = data %>% select(company,pros) %>% filter(company == company)
# corpus_pro = Corpus(VectorSource(pro$pros))
# corpus_pro = tm_map(corpus_pro, content_transformer(tolower))
# corpus_pro = tm_map(corpus_pro, removeNumbers)
# corpus_pro = tm_map(corpus_pro, removeWords ,stopwords('english'))
# corpus_pro = tm_map(corpus_pro, removePunctuation)
# corpus_pro = tm_map(corpus_pro, stripWhitespace)
# corpus_pro = tm_map(corpus_pro, removeWords,c("get","told","gave","took","can", "could"))
# tdm_pro = TermDocumentMatrix(corpus_pro,control = list(minWordLength = 1))
# m_pro = as.matrix(tdm_pro)
# sort(rowSums(m_pro), decreasing = TRUE)
#
# con = data %>% select(company,cons) %>% filter(company == company)
# corpus_con = Corpus(VectorSource(con$cons))
# corpus_con = tm_map(corpus_con, content_transformer(tolower))
# corpus_con = tm_map(corpus_con, removeNumbers)
# corpus_con = tm_map(corpus_con, removeWords ,stopwords('english'))
# corpus_con = tm_map(corpus_con, removePunctuation)
# corpus_con = tm_map(corpus_con, stripWhitespace)
# corpus_con = tm_map(corpus_con, removeWords,c("get","told","gave","took","can", "could"))
# tdm_con = TermDocumentMatrix(corpus_con,control = list(minWordLength = 1))
# m_con = as.matrix(tdm_con)
# sort(rowSums(m_con), decreasing = TRUE)
#
# advice.to.mgmt = data %>% select(company,advice.to.mgmt) %>% filter(company == company)
# corpus_advice = Corpus(VectorSource(advice.to.mgmt$advice.to.mgmt))
# corpus_advice = tm_map(corpus_advice, content_transformer(tolower))
# corpus_advice = tm_map(corpus_advice, removeNumbers)
# corpus_advice = tm_map(corpus_advice, removeWords ,stopwords('english'))
# corpus_advice = tm_map(corpus_advice, removePunctuation)
# corpus_advice = tm_map(corpus_advice, stripWhitespace)
# corpus_advice = tm_map(corpus_advice, removeWords,c("get","told","gave","took","can", "could"))
# tdm_summary = TermDocumentMatrix(corpus_sum,control = list(minWordLength = 1))
# m_advice = as.matrix(tdm_advice)
# sort(rowSums(m_advice), decreasing = TRUE)
})
runApp()
summary = data %>% select(company,summary) %>% filter(company == companyname)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
